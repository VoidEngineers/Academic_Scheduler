services:
  conflictmanager:
    restart: always
    build:
      dockerfile: Dockerfile
      context: ../source/conflictmanager
    # Need to create a .env.docker-compose file in the source/zbxhostcollector directory to be used as an environment file equivalent to the .env file for production
    env_file: ../source/conflictmanager/.env
    # expose the port 5000 of the container to the port 5001 of the host
    ports:
      - "5001:5000"

  schedulevotingmanager:
    restart: always
    build:
      dockerfile: Dockerfile
      context: ../source/schedulevotingmanager
    # Need to create a .env.docker-compose file in the source/zbxhostcollector directory to be used as an environment file equivalent to the .env file for production
    env_file: ../source/schedulevotingmanager/.env
    # expose the port 5000 of the container to the port 5001 of the host
    ports:
      - "5002:5000"

  frontend:
    restart: always
    build:
      dockerfile: Dockerfile
      context: ../source/frontend
    # Need to create a .env.docker-compose file in the source/zbxhostcollector directory to be used as an environment file equivalent to the .env file for production
    # env_file: ../../source/frontend/.env
    # expose the port 5000 of the container to the port 5001 of the host
    ports:
      - "8001:5173"

  # https://medium.com/@denis.verkhovsky/sonarqube-with-docker-compose-complete-tutorial-2aaa8d0771d4

  sonarqube:
    image: sonarqube:lts-community
    depends_on:
      - sonar_db
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://sonar_db:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
    ports:
      - "9000:9000"
    volumes:
      - sonarqube_conf:/opt/sonarqube/conf
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_temp:/opt/sonarqube/temp

  sonar_db:
    image: postgres:13
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonar
    volumes:
      - sonar_db:/var/lib/postgresql
      - sonar_db_data:/var/lib/postgresql/data

  redis:
    image: redis:alpine
    # container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

volumes:
  pgdata:
  sonarqube_conf:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  sonarqube_temp:
  sonar_db:
  sonar_db_data:
  redis_data:
  # mongo_data:
# networks:
#   redis_network:
#     driver: bridge
