services:
  # postgres:
  #   image: postgres:latest
  #   container_name: postgres-db
  #   restart: always
  #   ports:
  #     - "5432:5432"
  #   environment:
  #     POSTGRES_USER: admin
  #     POSTGRES_PASSWORD: admin
  #     POSTGRES_DB: test
  #   volumes:
  #     - ~/pgdata:/var/lib/postgresql/data # Persistent data directory

  # frontend:
  #   image: nginx:latest
  #   container_name: frontend

  frontend:
    restart: always
    build:
      dockerfile: Dockerfile
      context: ../source/frontend
    # Need to create a .env.docker-compose file in the source/zbxhostcollector directory to be used as an environment file equivalent to the .env file for production
    # env_file: ../../source/frontend/.env
    # Mount the aws cli configuration directory of host to the container to allow the container to access the AWS credentials
    # volumes:
    #   - ~/.aws/:/root/.aws:ro
    # expose the port 5000 of the container to the port 5001 of the host
    ports:
      - "5173:5173"

  # conflictmanager:
  #   image: conflictmanagement:latest
  #   container_name: conflictmanagement
  #   restart: always
  #   ports:
  #     - "5000:5000"
  #   environment:
  #     FLASK_APP: conflictmanagement
  #     FLASK_ENV: development
  #   volumes:
  #     - ./conflictmanagement:/app

  # mongodb:
  #   image: mongo:latest
  #   container_name: mongodb
  #   restart: always
  #   ports:
  #     - "27017:27017"
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: admin
  #     MONGO_INITDB_ROOT_PASSWORD: admin
  #     MONGO_INITDB_DATABASE: test
  #   volumes:
  #     - mongo_data:/data/db # Persistent data directory

  # nginx:
  #   image: nginx:alpine
  #   container_name: frontend #nginx webserver
  #   restart: always
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
  #     - ../frontend/dist:/usr/share/nginx/html
  #   depends_on:
  #     - conflictmanager

  # conflictmanager:
  #   image: conflictmanagement:latest
  #   container_name: conflictmanagement
  #   restart: always
  #   ports:
  #     - "5000:5000"
  #   environment:
  #     FLASK_APP: conflictmanagement
  #     FLASK_ENV: development
  #   volumes:
  #     - ./conflictmanagement:/app

  # https://medium.com/@denis.verkhovsky/sonarqube-with-docker-compose-complete-tutorial-2aaa8d0771d4

  sonarqube:
    image: sonarqube:lts-community
    depends_on:
      - sonar_db
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://sonar_db:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
    ports:
      - "9000:9000"
    volumes:
      - sonarqube_conf:/opt/sonarqube/conf
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_temp:/opt/sonarqube/temp

  sonar_db:
    image: postgres:13
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
      POSTGRES_DB: sonar
    volumes:
      - sonar_db:/var/lib/postgresql
      - sonar_db_data:/var/lib/postgresql/data

  redis:
    image: redis:alpine
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - redis_network

volumes:
  pgdata:
  sonarqube_conf:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  sonarqube_temp:
  sonar_db:
  sonar_db_data:
  redis_data:
  # mongo_data:

networks:
  redis_network:
    driver: bridge
