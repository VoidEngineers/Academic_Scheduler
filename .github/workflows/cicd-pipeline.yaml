name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for proper versioning
      
      # Set up Docker Buildx for more efficient builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      # Login to Docker Hub using the official action
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      # Build and push all service images with explicit Dockerfile paths
      - name: Build and push conflict manager image
        uses: docker/build-push-action@v4
        with:
          context: ./source/conflictmanager
          file: ./source/conflictmanager/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/conflictmanager:${{ github.sha }},${{ secrets.DOCKERHUB_USERNAME }}/conflictmanager:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/conflictmanager:latest
          cache-to: type=inline
      
      - name: Build and push user manager image
        uses: docker/build-push-action@v4
        with:
          context: ./source/usermanager
          file: ./source/usermanager/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/usermanager:${{ github.sha }},${{ secrets.DOCKERHUB_USERNAME }}/usermanager:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/usermanager:latest
          cache-to: type=inline
      
      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./source/frontend
          file: ./source/frontend/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/frontend:${{ github.sha }},${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest
          cache-to: type=inline
      
      # Update Kubernetes manifests with new image tags (only if directory exists)
      - name: Update Kubernetes manifests
        run: |
          if [ -d "./k8s" ]; then
            # Update image tags in manifests
            find ./k8s -type f -name "*.yaml" -exec sed -i "s|image: yourregistry/|image: ${{ secrets.DOCKERHUB_USERNAME }}/|g" {} \;
            find ./k8s -type f -name "*.yaml" -exec sed -i "s|:latest|:${{ github.sha }}|g" {} \;
            echo "Kubernetes manifests updated successfully"
          else
            echo "The k8s directory does not exist. Skipping manifest updates."
          fi
      
      # Configure Git for committing changes (only if k8s directory exists)
      - name: Configure Git and Commit Changes
        run: |
          if [ -d "./k8s" ] && [ -n "$(git status --porcelain ./k8s)" ]; then
            git config --global user.name 'GitHub Actions'
            git config --global user.email 'actions@github.com'
            git add ./k8s/
            git commit -m "Update image tags to ${{ github.sha }} [skip ci]"
            git push
            echo "Changes committed and pushed"
          else
            echo "No k8s directory or no changes to commit"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Optional: Deploy to Kubernetes cluster if needed
      # - name: Deploy to Kubernetes
      #   uses: actions-hub/kubectl@master
      #   env:
      #     KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
      #   with:
      #     args: apply -f ./k8s/